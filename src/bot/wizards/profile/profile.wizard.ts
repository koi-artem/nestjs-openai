import { Action, Ctx, Message, On, Wizard, WizardStep } from 'nestjs-telegraf';
import { WizardContext } from 'telegraf/typings/scenes';
import { SCENE_ID } from '../../../app.constants';
import { formatResults } from './profile.helpers';
import { Markup } from 'telegraf';
import { SettingsService } from '../../../settings/settings.service';

@Wizard(SCENE_ID.PROFILE)
export class ProfileWizard {
  constructor(private readonly settingsService: SettingsService) {}
  @WizardStep(1)
  async onSceneEnter(@Ctx() ctx: WizardContext) {
    ctx.wizard.next();
    await ctx.reply(
      '–Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –¥–æ—Å—è–≥—Ç–∏ —Ç–≤–æ—î—ó –º–µ—Ç–∏ üéØ\n–í–∫–∞–∂–∏ —Å–≤—ñ–π –≤—ñ–∫ (–≤—ñ–¥ 14 –¥–æ 80 —Ä–æ–∫—ñ–≤):',
      Markup.removeKeyboard(),
    );
  }

  @On('text')
  @WizardStep(2)
  async onAge(
    @Ctx() ctx: WizardContext,
    @Message() msg: { text: string },
  ): Promise<string> {
    const value = parseInt(msg.text);

    if (isNaN(value) || value <= 14 || value >= 80) {
      ctx.wizard.selectStep(1);
      return '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤—ñ–∫ –≤—ñ–¥ 14 –¥–æ 80 —Ä–æ–∫—ñ–≤:';
    }

    ctx.wizard.state['age'] = value;
    ctx.wizard.next();
    return '–í–∫–∞–∂–∏ —Å–≤—ñ–π –∑—Ä—ñ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–≤—ñ–¥ 140 –¥–æ 220 —Å–º):';
  }

  @On('text')
  @WizardStep(3)
  async onHeight(
    @Ctx() ctx: WizardContext & { wizard: { state: { name: string } } },
    @Message() msg: { text: string },
  ): Promise<string> {
    const value = parseInt(msg.text);

    if (isNaN(value) || value <= 140 || value >= 220) {
      ctx.wizard.selectStep(2);
      return '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –∑—Ä—ñ—Å—Ç –≤—ñ–¥ 140 –¥–æ 220 —Å–º:';
    }

    ctx.wizard.state['height'] = value;
    ctx.wizard.next();
    return '–í–∫–∞–∂–∏ —Å–≤–æ—é –≤–∞–≥—É –≤ –∫—ñ–ª–æ–≥—Ä–∞–º–∞—Ö (–≤—ñ–¥ 40 –¥–æ 200 –∫–≥):';
  }

  @On('text')
  @WizardStep(4)
  async onWeight(@Ctx() ctx: WizardContext, @Message() msg: { text: string }) {
    const value = parseInt(msg.text);

    if (isNaN(value) || value <= 40 || value >= 200) {
      ctx.wizard.selectStep(3);
      return '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä–µ–∫—Ç–Ω—É –≤–∞–≥—É –≤—ñ–¥ 40 –¥–æ 200 –∫–≥:';
    }

    ctx.wizard.state['weight'] = value;
    ctx.wizard.next();

    await ctx.replyWithHTML('–í–∏–±–µ—Ä–∏ —Å–≤—ñ–π —Ä—ñ–≤–µ–Ω—å —Ñ—ñ–∑–∏—á–Ω–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ:', {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: '–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å',
              callback_data: 'activity-1',
            },
          ],
          [
            {
              text: '–ü–æ–º—ñ—Ä–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å',
              callback_data: 'activity-2',
            },
          ],
          [
            {
              text: '–ê–∫—Ç–∏–≤–Ω–∏–π —Å–ø–æ—Å—ñ–± –∂–∏—Ç—Ç—è',
              callback_data: 'activity-3',
            },
          ],
          [
            {
              text: '–í–∏—Å–æ–∫–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å',
              callback_data: 'activity-4',
            },
          ],
          [
            {
              text: '–î—É–∂–µ –≤–∏—Å–æ–∫–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å',
              callback_data: 'activity-5',
            },
          ],
        ],
      },
    });
  }

  @Action(/activity-.+/)
  @WizardStep(5)
  async onActivity(@Ctx() ctx: WizardContext) {
    await ctx.answerCbQuery();
    const value = parseInt((ctx as any).match[0].replace('activity-', ''));

    if (isNaN(value) || value < 1 || value > 5) {
      ctx.wizard.selectStep(4);
      return '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä–∏ —Ä—ñ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∑—ñ —Å–ø–∏—Å–∫—É:';
    }

    ctx.wizard.state['activity'] = value;

    const inlineKeyboard = Markup.inlineKeyboard([
      [Markup.button.callback('–ß–æ–ª–æ–≤—ñ–∫', 'gender-1')],
      [Markup.button.callback('–ñ—ñ–Ω–∫–∞', 'gender-2')],
    ]);

    ctx.wizard.next();
    await ctx.replyWithHTML('–í–∫–∞–∂–∏ —Å–≤–æ—é —Å—Ç–∞—Ç—å:', {
      ...inlineKeyboard,
    });
  }

  @Action(/gender-.*/)
  @WizardStep(6)
  async onGender(@Ctx() ctx: WizardContext) {
    await ctx.answerCbQuery();
    const value = parseInt((ctx as any).match[0].replace('gender-', ''));

    if (isNaN(value) || value < 1 || value > 2) {
      ctx.wizard.selectStep(5);
      return '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä–∏ —Å—Ç–∞—Ç—å –∑—ñ —Å–ø–∏—Å–∫—É:';
    }

    ctx.wizard.state['gender'] = value;
    ctx.wizard.next();

    const inlineKeyboard = Markup.inlineKeyboard([
      [Markup.button.callback('–ó–º–µ–Ω—à–µ–Ω–Ω—è –≤–∞–≥–∏', 'goal-1')],
      [Markup.button.callback('–£—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∞–≥–∏', 'goal-2')],
      [Markup.button.callback("–ó–±—ñ–ª—å—à–µ–Ω–Ω—è –ú'—è–∑–æ–≤–æ—ó –ú–∞—Å–∏", 'goal-3')],
    ]);

    await ctx.replyWithHTML('–í–∏–±–µ—Ä–∏ —Å–≤–æ—é –º–µ—Ç—É:', {
      ...inlineKeyboard,
    });
  }

  @Action(/goal-.+/)
  @WizardStep(7)
  async onGoal(@Ctx() ctx: WizardContext) {
    await ctx.answerCbQuery();
    const value = parseInt((ctx as any).match[0].replace('goal-', ''));

    if (isNaN(value) || value < 1 || value > 3) {
      ctx.wizard.selectStep(6);
      return '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä–∏ –º–µ—Ç—É –∑—ñ —Å–ø–∏—Å–∫—É:';
    }

    ctx.wizard.state['goal'] = value;

    const { age, weight, height, activity, gender } = ctx.wizard.state as any;

    const { formattedResult, avgGoal } = formatResults(
      age,
      height,
      weight,
      activity,
      gender,
      value,
    );

    try {
      await this.settingsService.create(ctx.from.id.toString(), {});
    } catch (e) {
      console.error(e.message);
    }

    await ctx.replyWithHTML(formattedResult);
    await ctx.scene.enter(SCENE_ID.SETTINGS);
  }
}
